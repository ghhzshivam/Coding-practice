Dynamic programming

Dynamic Programming is mainly an optimization over plain recursion. Wherever we see a recursive solution that has repeated 
calls for same inputs, we can optimize it using Dynamic Programming. The idea is to simply store the results of subproblems,
 so that we do not have to re-compute them when needed later. This simple optimization reduces time complexities from 
 exponential to polynomial.

1) Optimal substructure 
2) Overlapping Subproblem

To solve the problem we can do 2 things
"Remember the result" -> Don't recalculate and solve problem again and again.

1) Memorisation(Top-Down)- whenever we saw the solution we save it in memory.
2) Tabulation(Bottom up) -we precompute the solution and lokup later.





ques 1) Bell No 
Bell Numbers (Number of ways to Partition a Set)
# Input:  n = 2
# Output: Number of ways = 2
# Explanation: Let the set be {1, 2}
#             { {1}, {2} } 
#             { {1, 2} }

we have a formula but we can solve it by using bell traingle as we can see the sub problem can think of  a solution in matrix
1   last no = first of next and sum no upper and lower t get result
1 2
2 3 5
5 7 10 15
15 20 27 37 52

Soln) def bellno(n):

    bell = [[0 for _ in range(n+1)] for j in range(n+1)]

    # first row first column = 1
    bell[0][0] = 1

    for i in range(1,n+1):

        # every row 1st column is the last no in the previous row
        bell[i][0] = bell[i-1][i-1]

        for j in range(1, i+1):

            bell[i][j] = bell[i-1][j-1]+bell[i][j-1]
        


    return bell[n][0]

bellno(3)




# 289. Game of Life
In this code we are using for loop under a for loop and then running another for loop under the double for loop 
Time complexity is n^3.

b = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]

        #  1 -> 0  : 2
        #  1 -> 1  : 1
        #  1 -> 0  : 3
        #  0 -> 1  : 4


# Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]
r  = len(b)
c = len(b[0])

n = [[0 for i in range(c)]for i in range(r)]

d = [(1,0), (-1,0), (0,1), (0,-1), (1,1), (-1,1), (1,-1), (-1,-1)]
dummy = []

for i in b:
    dummy.append(i[:])

print(dummy)

for i in range(r):
    for j in range(c):
        live = 0
        dead = 0

        for x,y in d:
            a = x+i
            b = y+j

            if r>a>=1 and c>b>=0:
                if dummy[a][b] ==1:
                    live+= 1
                else:
                    dead +=1
                     
        if dummy[i][j] ==1:
            if live<2:
                n[i][j] = 0
            elif 3>=live>=2:
                n[i][j] = 1
            elif live>3:
                n[i][j] = 0

        else:
            if live ==3:
                n[i][j] = 1

print(n)
